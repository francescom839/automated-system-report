import re
import csv

logfile = "syslog.log"
with open(logfile, "r") as file:
    file_logs = file.readlines()

errors_generated = {} # Containing Name of the error + amount occurred
user_info_error_generated = {} # Containing Username + AmountErrors & AmountInfos generated

for line in file_logs:
    usernameMatch = re.search(r"\((.+)\)", line)
    username = usernameMatch.group(1) if usernameMatch else None # Extracting the username
    error_match = re.search(r"ticky: ERROR ([\w ]+)", line)
    info_match = re.search(r"ticky: INFO ([\w ]+)", line)

    if info_match:  # log line is an INFO
        # add user and increase the amount of infos he has generated
        if username in user_info_error_generated:
            user_info_error_generated[username]["info"] += 1
        else:
            user_info_error_generated[username] = {"info": 1, "error": 0}
    elif error_match:  # log line is an error
        # add the error and increase the occurred times, also increase the errors generated by the user
        error = error_match.group(1)
        if error in errors_generated:
            errors_generated[error] += 1
        else:
            errors_generated[error] = 1

        if username: 
            if username in user_info_error_generated:
                user_info_error_generated[username]["error"] += 1
            else:
                user_info_error_generated[username] = {"info": 0, "error": 1} # In case the user's first log is an error
                
# Sorting the dictionaries: errors_generated will be in descending order, user_info_error_generated in alphabetic order
user_info_error_generated = dict(sorted(user_info_error_generated.items())) #Alphabetically sorted by default!

errors_generated = dict(sorted(errors_generated.items(), key=lambda item: item[1], reverse=True))

# Writing error_message.csv
with open("error_message.csv", "w", newline="") as error_file:
    fieldnames = ["Error", "Count"]
    writer = csv.DictWriter(error_file, fieldnames=fieldnames)
    writer.writeheader()
    for error, count in errors_generated.items():
        writer.writerow({"Error": error, "Count": count})

# Writing user_statistics.csv
with open("user_statistics.csv", "w", newline="") as user_file:
    fieldnames = ["Username", "INFO", "ERROR"]
    writer = csv.DictWriter(user_file, fieldnames=fieldnames)
    writer.writeheader()
    for username, stats in user_info_error_generated.items():
        writer.writerow({"Username": username, "INFO": stats["info"], "ERROR": stats["error"]})

print("CSV files generated successfully.")